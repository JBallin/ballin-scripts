#!/usr/bin/env bash

# TODO:
  # function that takes a filename and reads the gist using 'gist -r'
    # function to display names of the files?
  # INIT:
    # log in to gist
    # create gist and save id in config
  # give error if id/sn null or if gist -r $id gives error?
    # need to make sure that the gist with that $id actually exists...tell them to run init?
    # or maybe just run it for them now?

id=$(ballin_config get gu.id)
url="$(ballin_config get gu.url)/$id"
# TODO: generate file_suggestions based on API response instead of hard-coding
file_suggestions='
  ballin_config
  bash_completions
  bash_profile.sh
  bashrc.sh
  brackets_disabled_extensions
  brackets_extensions
  brackets_keymap.json
  brackets_settings.json
  brew_cask
  brew_leaves
  brew_list
  brew_services
  git_config
  gitconfig.cson
  gitignore_global
  nanorc
  npm_global
  nvmrc
  profile.sh
  vimrc
  vs_extensions
  vs_settings.json
  zshrc.sh'

### TODO handle error when $id fails github API (check res code) (either nonexistant, deleted gist, skipped init etc)

# make sure given at least one argument
if ! $(gist -r $id > /dev/null); then
  printf "Error retrieving your gist, please run 'ballin_update'.\n"
elif [ ! -z $1 ]; then
  if [ $1 == open ]; then
    echo $url && open $url
  elif [ $1 == read ]; then
    # make sure given two arguments to read
    if [ ! -z $2 ]; then
      # if file exits, print it, else print the potential file options
      gist -r $id $2 || printf "\nOptions: $file_suggestions\n"
    else
      # user didn't provide file_name to read
      printf "Error: 'read' needs a filename.\n\nOptions: $file_suggestions\n"
    fi
  elif [ $1 == help ]; then
    # display the main help output
    ballin
  fi

else
  # no arguments given -> run gistUpdater

  # create cache folder if doesn't exist
  (
    cd $HOME/.ballin-scripts
    if [ ! -d .gu-cache ]; then mkdir .gu-cache; fi
  )

  u() {
    local file_name=$1
    local cache_file="$HOME/.ballin-scripts/.gu-cache/$file_name"
    local input=$2
    local is_changed
    local is_new=1
    local is_empty=1

    update_cache() {
      # add file to cache if doesn't exist
      if [ ! -f $cache_file ]; then
        # set is_new to true if the $file_name doesn't exist yet in gist, otherwise create $cache_file with current gist_content
        if ! gist -r $id $file_name > $cache_file; then
          is_new=0
        fi
      fi

      # check for changes (mark as no changes if input is empty and file is already labeled 'empty')
      if [ "$is_new" == 1 ] && [ "$($input)" == "$(cat $cache_file)" ] || ([ "$($input)" == "" ] && [ "$(cat $cache_file)" == "empty" ]); then
        is_changed=1
      else
        $input > $cache_file
        is_changed=0
      fi

      # add "empty" if $cache_file empty so that gist doesnt give empty error
      if [ ! -s $cache_file ]; then
        echo "empty" > $cache_file
      fi
      # add newline to end of $file_name (if not already there), to match gist format
      sed -i '' -e '$a\' $cache_file

      if [ "$(cat $cache_file)" == 'empty' ]; then
        is_empty=0
      fi

    }
    # helper func determines if gist needs to be updated
    output_file_change() {
      # remove extension for progress output
      file_without_extension=${file_name%.*}
      # check for changes in file
      if [ "$is_changed" == 1 ]; then
        # file hasn't changed
        # only show file if non-empty
        if [ "$is_empty" == 1 ]; then
          echo "âœ” $file_without_extension"
        fi
      else
        # file HAS changed
        if [ "$is_new" == 0 ]; then
          echo "ðŸ’¾ $file_without_extension"
        elif [ "$is_empty" == 0 ]; then
          echo "âœ–ï¸Ž $file_without_extension"
        else
          echo "âœš $file_without_extension"
        fi
      fi
    }
    update_cache
    if [ "$is_changed" == 0 ]; then gist -u $id $cache_file > /dev/null; fi
    output_file_change
  }

	(
    cd $HOME

    ### SHELL
    if [ -f .bash_profile ]; then
      u 'bash_profile.sh' 'cat .bash_profile'
    fi
    if [ -f .zshrc ]; then
      u 'zshrc.sh' 'cat .zshrc'
    fi
    if [ -f .profile ]; then
      u 'profile.sh' 'cat .profile'
    fi
    if [ -f .bashrc ]; then
      u 'bashrc.sh' 'cat .bashrc'
    fi
    # BASH COMPLETIONS
    if [ -d /usr/local/etc/bash_completion.d ]; then
      u 'bash_completions' 'ls /usr/local/etc/bash_completion.d'
    fi

    ### BREW
    if [ -x "$(command -v brew)" ]; then
      u 'brew_list' 'brew list --formula'
      u 'brew_leaves' 'brew leaves'
      u 'brew_cask' 'brew list --cask'
      u 'brew_services' 'brew services list'
      u 'Brewfile' 'brew bundle dump --file=-'
    fi

    ### GIT
		if [ -f .gitignore_global ]; then
      u 'gitignore_global' 'cat .gitignore_global'
    fi
    if [ -f .gitconfig ]; then
      u 'gitconfig' 'cat .gitconfig'
    fi

    ### NODE
    # NPM
    if [ -x "$(command -v npm)" ]; then
      u 'npm_global' 'npm list -g --depth=0'
    fi

    # YARN
    # TODO: remove last line (Done) which varies based on time
    # if [ -x "$(command -v npm)" ]; then
    #   u 'yarn_global' "yarn global list --depth=0 | sed '$d'"
    # fi

    # NVM
    if [ -f .nvmrc ]; then
      u 'nvmrc' 'cat .nvmrc'
    fi

    ### VSCODE
    vscode_paths=("Code" "Code - Insiders")
    vscode_binaries=("code" "code-insiders")
    vscode_prefixes=("vs" "vsI")
    vscode_files=("settings.json" "keybindings.json")

    for i in "${!vscode_paths[@]}"; do
      vscode_dir="$HOME/Library/Application Support/${vscode_paths[$i]}/User/"

      if [ -d "$vscode_dir" ]; then
        vscode_cmd="/usr/local/bin/${vscode_binaries[$i]}"
        vscode_prefix="${vscode_prefixes[$i]}"
        cd "$vscode_dir"
        for file in "${vscode_files[@]}"; do
          if [ -f "$file" ]; then
            u "${vscode_prefix}_${file%.json}" "cat $file"
          fi
        done
        u "${vscode_prefix}_extensions" "$vscode_cmd --list-extensions"
        cd - > /dev/null
      fi
    done

    ### BRACKETS
    (
      cd $HOME/Library/Application\ Support/
      if [ -d Brackets ]; then
        cd Brackets
        if [ -f brackets.json ]; then
          u 'brackets_settings.json' 'cat brackets.json'
        fi
        if [ -f keymap.json ]; then
          u 'brackets_keymap.json' 'cat keymap.json'
        fi
        u 'brackets_extensions' 'ls -A extensions/user/'
        u 'brackets_disabled_extensions' 'ls -A extensions/disabled/'
      fi
    )

    ### TEXT EDITORS
    # VIM
    if [ -f .vimrc ]; then
      u 'vimrc' 'cat .vimrc'
    fi

    # NANO
    if [ -f .nanorc ]; then
      u 'nanorc' 'cat .nanorc'
    fi

    ### BALLIN SCRIPTS
    if [ -f .ballin-scripts/ballin.config.json ]; then
      u 'ballin_config' 'cat .ballin-scripts/ballin.config.json'
    fi
	)
fi
